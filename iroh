#! /usr/bin/perl

# Written by Deji Adegbite
# This is a very simple script written to experiment with daemons in Perl. The
# only thing this script does is to execute a script/file in a target folder 
use v5.26;
use IO::Socket;
use Getopt::Long;

# Define some defaults.
my $iroh_path = '/var/run/iroh/';               # This is the folder where the socket and pid files live
my $config_file = '/etc/iroh/config';           # Name and location of the file to use for configuration
my $target_folder = $ENV{'HOME'};               # The folder to search for file to execute
my $file = 'iroh';                              # The name of the file or script to execute

# List of valid commands for iroh. When there's a new command, write a
# subroutine to handle it and add it to this hash
my %valid_commands = (
    start => {
        description => 'Starts the iroh daemon',
        action => \&start
    },

    stop => {
        description => 'Stops the iroh daemon',
        action => \&stop
    },

    restart => {
        description => 'Restarts the iroh daemon',
        action => \&restart
    },

    commands => {
        description => 'Shows a list of iroh commands',
        action => \&commands
    }

);



# Handle the special cases for getting help

if(scalar @ARGV == 0) { showhelp() }            # Invoking iroh without any subcommands should show help

# Invoking iroh with 'help' as the subcommand or any of the following options
# should show the help system
my $subcommand = shift @ARGV;
if(
    $subcommand eq 'help'       ||
    $subcommand eq '-h'         ||
    $subcommand eq '--h'        ||
    $subcommand eq '-help'      ||
    $subcommand eq '--help'     ||
    $subcommand eq '?'          ||
    $subcommand eq '-?'         ||
    $subcommand eq '--?'
)
{
    # Show the help messages and exit
    showhelp();
    exit 0
}

# For unrecognized commands, show the error message and exit
unless($valid_commands{$subcommand}) { say "The command $subcommand is not recognized by iroh"; exit 1 }

$valid_commands{$subcommand}{'action'} -> ();                             # Execute the sub command

sub start {
    # Come here to start the daemon
    # my $sock = IO::Socket::UNIX->new();
    say 'start'
    
}

sub stop {
    # Come here to stop the daemon
    say 'stop'
}

sub restart {
    # Come here to restart the daemon
    say 'restart'
}


sub showhelp {
print << 'EOF'
Use `commands' to show the list of commands and what they do.
`iroh <COMMAND> help' to get help for an iroh command. For
example `iroh start help` to get help on the `start' command.
See the iroh manual (`man iroh') for more details.
EOF
}


sub commands {
    
    say 'help: To get help about iroh';             # First show the command to get help, then...

    # ...list all the other commands
    my @cmds = sort (keys %valid_commands);
    for(@cmds) {
        say "$_: " . $valid_commands{$_}{'description'}
    }
}


__DATA__